- name: Integration Basic Arithmetic
  style: list
  input: (print (+ 1 2 3))
  expected: "6"
- name: Integration Basic List Creation
  style: list
  input: (print (list 1 "text" true))
  expected: "(1 text true)"
- name: Integration Basic Logical Not
  style: list
  input: (print (not false))
  expected: "true"

- name: Integration Macro Definition and Call
  style: list
  input: |
    (define (test_macro x y) (+ x y))
    (print (test_macro 5 3))
  expected: "8"

- name: Integration List Length
  style: list
  input: (print (len (list 1 2 3 4 5)))
  expected: "5"

- name: Integration String Concatenation
  style: list
  input: (print (core/str+ "Hello" " " "World"))
  expected: "Hello World"

- name: Integration Variable Set and Get
  style: list
  input: |
    (set! integration_test_var 42)
    (print (get integration_test_var))
  expected: "42"

- name: Integration Control Flow Do
  style: list
  input: |
    (do
      (print "First action")
      (print "Final result"))
  expected: |
    First action
    Final result

- name: Integration Edge Case Empty List
  style: list
  input: (print (list))
  expected: "()"
- name: Integration Edge Case Empty String Concatenation
  style: list
  input: (print (core/str+))
  expected: ""

- name: Integration Macro Atom Double
  style: list
  input: |
    (define (double x) (* x 2))
    (print (double 5))
  expected: "10"
- name: Integration Macro Atom Double Second Call
  style: list
  input: |
    (define (double x) (* x 2))
    (print (double 10))
  expected: "20"
- name: Integration Macro Atom Is Positive
  style: list
  input: |
    (define (is_positive x) (gt? x 0))
    (print (is_positive 5))
  expected: "true"
- name: Integration Macro Atom Is Negative
  style: list
  input: |
    (define (is_positive x) (gt? x 0))
    (print (is_positive -3))
  expected: "false"
- name: Integration Macro Atom Store And Get
  style: list
  input: |
    (define (store_and_get key value)
      (do
        (set! key value)
        (get key)))
    (print (store_and_get test.item "stored_value"))
  expected: "stored_value"
- name: Integration Macro Atom Calculate And Store
  style: list
  input: |
    (define (calculate_and_store x y)
      (do
        (set! result (+ x y))
        (print (get result))))
    (calculate_and_store 10 20)
  expected: "30"