;; Sutra Assignment & World Macro Tests
;;
;; This suite validates the behavior of macros that interact with the
;; world state, such as setting, getting, and deleting values.

;;;
;;; 1. Set and Get
;;;

(test "assignment: set! and get"
      (expect (value 100)
              (tags "assignment"))
      (do
        (set! player.health 100)
        (get player.health)))  ; => 100

(test "assignment: set! nested path"
      (expect (value "sword") (tags "assignment"))
      (do
        (set! player.inventory.weapon "sword")
        (get player.inventory.weapon)))  ; => "sword"

(test "assignment: get non-existent path"
      (expect (value nil) (tags "assignment"))
      (get non.existent.path))  ; => nil

(test "assignment: set! arity error (too few)"
      (expect (error Eval)
              (tags "assignment"))
      (set! player.health))  ; set! expects exactly 2 arguments, got 1

(test "assignment: get arity error (zero args)"
      (expect (error Eval)
              (tags "assignment"))
      (get))  ; get expects exactly 1 argument, got 0

;;;
;;; 2. Add and Subtract
;;;

(test "assignment: add! success"
      (expect (value 15)
              (tags "assignment"))
      (do
        (set! player.score 10)
        (add! player.score 5)
        (get player.score)))  ; => 15

(test "assignment: sub! success"
      (expect (value 5)
              (tags "assignment"))
      (do
        (set! player.mana 10)
        (sub! player.mana 5)
        (get player.mana)))  ; => 5

(test "assignment: add! type error"
      (expect (error TypeError)
              (tags "assignment"))
      (add! player.score "five"))  ; add! expects number, got string

(test "assignment: add! arity error (too few)"
      (expect (error Eval)
              (tags "assignment"))
      (add! player.score))  ; add! expects exactly 2 arguments, got 1

;;;
;;; 3. Increment and Decrement
;;;

(test "assignment: inc! success"
      (expect (value 6)
              (tags "assignment"))
      (do
        (set! counter 5)
        (inc! counter)
        (get counter)))  ; => 6

(test "assignment: dec! success"
      (expect (value 4)
              (tags "assignment"))
      (do
        (set! lives 5)
        (dec! lives)
        (get lives)))  ; => 4

(test "assignment: inc! arity error (zero args)"
      (expect (error Eval)
              (tags "assignment"))
      (inc!))  ; inc! expects exactly 1 argument, got 0

(test "assignment: dec! arity error (zero args)"
      (expect (error Eval)
              (tags "assignment"))
      (dec!))  ; dec! expects exactly 1 argument, got 0

;;;
;;; 4. Delete
;;;

(test "assignment: del! success"
      (expect (value nil)
              (tags "assignment"))
      (do
        (set! temp.value "data")
        (del! temp.value)
        (get temp.value)))  ; => nil

(test "assignment: del! arity error (zero args)"
      (expect (error Eval)
              (tags "assignment"))
      (del!))  ; del! expects exactly 1 argument, got 0
