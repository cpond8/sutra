;; Sutra Comparison Atom Tests
;;
;; This suite validates the behavior of all comparison atoms, including
;; their aliases, edge cases, and error conditions.

;;;
;;; 1. Equality (eq?, =, is?)
;;;

(test "comparison: eq? - success true"
      (expect (value true)
              (tags "comparison"))
      (eq? 5 5))  ; 5 = 5 ? => true

(test "comparison: eq? - success false"
      (expect (value false)
              (tags "comparison"))
      (eq? 5 6))  ; 5 = 6 ? => false

(test "comparison: eq? - different types"
      (expect (value false)
              (tags "comparison"))
      (eq? 1 "1"))  ; 1 = "1" ? => false

(test "comparison: eq? - arity error (1 arg)"
      (expect (error Validation)
              (tags "comparison"))
      (eq? 10))  ; eq? expects exactly 2 arguments, got 1

(test "comparison: eq? - arity error (0 args)"
      (expect (error Validation)
              (tags "comparison"))
      (eq?))  ; eq? expects exactly 2 arguments, got 0

(test "comparison: = alias of eq?"
      (expect (value true)
              (tags "comparison"))
      (= 1 1))  ; 1 = 1 ? => true

(test "comparison: is? alias of eq?"
      (expect (value true)
              (tags "comparison"))
      (is? "hello" "hello"))  ; "hello" = "hello" ? => true

;;;
;;; 2. Greater Than (gt?, >, over?)
;;;

(test "comparison: gt? - success true"
      (expect (value true)
              (tags "comparison"))
      (gt? 10 5))  ; 10 > 5 ? => true

(test "comparison: gt? - success false"
      (expect (value false)
              (tags "comparison"))
      (gt? 5 10))  ; 5 > 10 ? => false

(test "comparison: gt? - arity error (1 arg)"
      (expect (error Validation)
              (tags "comparison"))
      (gt? 10))  ; gt? expects exactly 2 arguments, got 1

(test "comparison: gt? - arity error (0 args)"
      (expect (error Validation)
              (tags "comparison"))
      (gt?))  ; gt? expects exactly 2 arguments, got 0

(test "comparison: gt? - type error"
      (expect (error TypeError)
              (tags "comparison"))
      (gt? 10 "one"))  ; 10 > "one" ? => type error

(test "comparison: > alias of gt?"
      (expect (value true)
              (tags "comparison"))
      (> 2 1))  ; 2 > 1 ? => true

(test "comparison: over? alias of gt?"
      (expect (value true)
              (tags "comparison"))
      (over? 10 0))  ; 10 > 0 ? => true

;;;
;;; 3. Less Than (lt?, <, under?)
;;;

(test "comparison: lt? - success true"
      (expect (value true)
              (tags "comparison"))
      (lt? 1 5))  ; 1 < 5 ? => true

(test "comparison: lt? - success false"
      (expect (value false)
              (tags "comparison"))
      (lt? 5 1))  ; 5 < 1 ? => false

(test "comparison: lt? - arity error (1 arg)"
      (expect (error Validation)
              (tags "comparison"))
      (lt? 10))  ; lt? expects exactly 2 arguments, got 1

(test "comparison: lt? - arity error (0 args)"
      (expect (error Validation)
              (tags "comparison"))
      (lt?))  ; lt? expects exactly 2 arguments, got 0

(test "comparison: lt? - type error"
      (expect (error TypeError)
              (tags "comparison"))
      (lt? 1 "ten"))  ; 1 < "ten" ? => type error

(test "comparison: < alias of lt?"
      (expect (value true)
              (tags "comparison"))
      (< 1 2))  ; 1 < 2 ? => true

(test "comparison: under? alias of lt?"
      (expect (value true)
              (tags "comparison"))
      (under? 0 10))  ; 0 < 10 ? => true

;;;
;;; 4. Greater Than or Equal (gte?, >=, at-least?)
;;;

(test "comparison: gte? - success true (greater)"
      (expect (value true)
              (tags "comparison"))
      (gte? 10 5))  ; 10 >= 5 ? => true

(test "comparison: gte? - success true (equal)"
      (expect (value true)
              (tags "comparison"))
      (gte? 5 5))  ; 5 >= 5 ? => true

(test "comparison: gte? - success false"
      (expect (value false)
              (tags "comparison"))
      (gte? 5 10))  ; 5 >= 10 ? => false

(test "comparison: gte? - arity error (1 arg)"
      (expect (error Validation)
              (tags "comparison"))
      (gte? 10))  ; gte? expects exactly 2 arguments, got 1

(test "comparison: gte? - arity error (0 args)"
      (expect (error Validation)
              (tags "comparison"))
      (gte?))  ; gte? expects exactly 2 arguments, got 0

(test "comparison: gte? - type error"
      (expect (error TypeError)
              (tags "comparison"))
      (gte? 10 "one"))  ; 10 >= "one" ? => type error

(test "comparison: >= alias of gte?"
      (expect (value true)
              (tags "comparison"))
      (>= 2 2))  ; 2 >= 2 ? => true

(test "comparison: at-least? alias of gte?"
      (expect (value true)
              (tags "comparison"))
      (at-least? 10 10))  ; 10 >= 10 ? => true

;;;
;;; 5. Less Than or Equal (lte?, <=, at-most?)
;;;

(test "comparison: lte? - success true (less)"
      (expect (value true)
              (tags "comparison"))
      (lte? 1 5))  ; 1 <= 5 ? => true

(test "comparison: lte? - success true (equal)"
      (expect (value true)
              (tags "comparison"))
      (lte? 5 5))  ; 5 <= 5 ? => true

(test "comparison: lte? - success false"
      (expect (value false)
              (tags "comparison"))
      (lte? 10 5))  ; 10 <= 5 ? => false

(test "comparison: lte? - arity error (1 arg)"
      (expect (error Validation)
              (tags "comparison"))
      (lte? 10))  ; lte? expects exactly 2 arguments, got 1

(test "comparison: lte? - arity error (0 args)"
      (expect (error Validation)
              (tags "comparison"))
      (lte?))  ; lte? expects exactly 2 arguments, got 0

(test "comparison: lte? - type error"
      (expect (error TypeError)
              (tags "comparison"))
      (lte? 1 "ten"))  ; 1 <= "ten" ? => type error

(test "comparison: <= alias of lte?"
      (expect (value true)
              (tags "comparison"))
      (<= 2 2))  ; 2 <= 2 ? => true

(test "comparison: at-most? alias of lte?"
      (expect (value true)
              (tags "comparison"))
      (at-most? 10 10))  ; 10 <= 10 ? => true
