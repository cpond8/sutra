;; Lambda and Let Special Forms - Core Tests

(test "lambda: basic invocation"
  (expect (value 7))
  ((lambda (x y)
     (+ x y))
   3 4))  ; => 7

(test "lambda: closure captures lexical environment"
  (expect (value 15))
  (let ((n 10))
    (let ((f (lambda (x)
               (+ x n))))
      (f 5))))  ; => 15

(test "lambda: variadic arguments"
  (expect (value 6))
  ((lambda (x y ...rest)
     (+ x y (car rest)))
   1 2 3))  ; => 6

(test "lambda: arity error (too few)"
  (expect (error Eval)) ; because the arity of lambdas can only be checked at runtime
  ((lambda (x y) (+ x y))
   1))  ; => arity error

(test "lambda: arity error (too many)"
  (expect (error Eval)) ; because the arity of lambdas can only be checked at runtime
  ((lambda (x y) (+ x y))
   1 2 3))  ; => arity error

(test "lambda: error on non-list parameter"
  (expect (error Eval))
  ((lambda 42 (+ x y))
   1 2))  ; => error on non-list parameter

(test "lambda: used as argument"
  (expect (value 3))
  ((lambda (f x) (f x))
   (lambda (n) (+ n 1))
   2))  ; => 3

(test "lambda: higher-order (returns lambda)"
  (expect (value 15))
  ((lambda (n)
     (lambda (x) (+ x n)))
   10))  ; => function that adds 10

(test "let: basic bindings"
  (expect (value 12))
  (let ((a 5)
        (b 7))
    (+ a b)))  ; => 12

(test "let: shadowing outer lexical variable"
  (expect (value 3))
  (let ((x 1))
    (let ((x 2)
          (y x))
      (+ x y))))  ; => 3

(test "let: sequential binding and shadowing"
  (expect (value 6))
  (let ((x 1)
        (y (+ x 1))
        (z (+ y 1)))
    (+ x y z)))  ; => 6

(test "let: bindings visible in later bindings"
  (expect (value 15))
  (let ((a 5)
        (b (+ a 5))
        (c (+ b 5)))
    c))  ; => 15

(test "let: error on non-pair binding"
  (expect (error Eval))
  (let (42)
    (+ 1 2)))  ; => error on non-pair binding