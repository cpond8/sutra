;; Define Special Form - Core Tests

(test "define: function definition"
  (expect (value 7))
  (do
    (define (add x y) (+ x y))
    (add 3 4)))  ; => 7

(test "define: variable definition"
  (expect (value 42))
  (do
    (define answer 42)
    answer))  ; => 42

(test "define: function with multiple expressions"
  (expect (value 15))
  (do
    (define (complex-func x)
      (let ((y (+ x 5)))
        (+ y 10)))
    (complex-func 0)))  ; => 15

(test "define: variadic function"
  (expect (value 10))
  (do
    (define (sum x y ...rest)
      (+ x y (car rest)))
    (sum 1 2 7)))  ; => 10

(test "define: nested function definitions"
  (expect (value 8))
  (do
    (define (outer x)
      (do
        (define (inner y)
          (+ x y))
        (inner 3)))
    (outer 5)))  ; => 8

(test "define: function that returns lambda"
  (expect (value 12))
  (do
    (define (make-adder n)
      (lambda (x)
        (+ x n)))
    (define add5 (make-adder 5))
    (add5 7)))  ; => 12

(test "define: error on undefined function"
  (expect (error Runtime))
  (undefined-function 1 2 3))  ; => error

(test "define: function with no parameters"
  (expect (value 42))
  (do
    (define (get-answer) 42)
    (get-answer)))  ; => 42

(test "define: function with rest parameters only"
  (expect (value 6))
  (do
    (define (sum-all ...args)
      (if (null? args)
          0
          (+ (car args) (apply sum-all (cdr args)))))
    (sum-all 1 2 3)))  ; => 6