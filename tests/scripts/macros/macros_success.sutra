;; Consolidated Macro Success Tests
;; ===============================

;; --- Basic macro definition and invocation tests ---
;; Tests minimal macro functionality and parameter passing

;; Test: Macro with parameter
(define (greet name) (print name))
(greet "Alice")
(greet "Bob")

;; Test: Macro with different parameter
(define (show value) (print value))
(show "test message")
(show 42)

;; Test: Definition-only macro (not invoked)
(define (unused_macro param) (print param))

;; --- Simple macro test ---
(define (greet_simple name) (print name))
(greet_simple "Alice")

;; --- Macro string operations test ---
;; Tests macros that work with string values (no concatenation)

;; Macro that takes a string parameter
(define (echo_string text) (print text))
(echo_string "Hello")
(echo_string "World")

;; Macro that prints predefined strings
(define (say_hello name) (print name))
(say_hello "Alice")
(say_hello "Bob")

;; Macro with multiple string parameters
(define (print_two first second)
  (do
    (print first)
    (print second)))
(print_two "Line 1" "Line 2")

;; str+ macro tests
(print (str+ "foo" "bar"))           ;; should print foobar
(print (str+ "a" "b" "c"))           ;; should print abc
(print (str+ "hello, " "world!"))    ;; should print hello, world!

;; Error case: uncomment to test type error
;; (print (str+ "foo" 42))

;; --- All valid macro expansion and parameter binding cases ---

;; Variadic macro forwarding
(define (test_str_plus ...args) (core/str+ ...args))
(print (test_str_plus "a" "b" "c"))
(print (test_str_plus))

;; Explicit spread operator
(define (wrap x) (apply list x))
(print (wrap (list 1 2 3)))
(print (wrap (list)))

;; Variadic parameter used outside call position
(define (collect ...items) items)
(print (collect 1 2 3))
(print (collect))

;; Multiple/nested spreads
(define (multi_spread a b ...rest) (list a ...rest b ...rest))
(print (multi_spread 1 2 3 4 5))

(define (nested_spread ...xs) (wrap xs))
(print (nested_spread 7 8 9))

;; Non-variadic parameter bound to a list
(define (show_list x) (list ...x))
(print (show_list (list "foo" "bar")))

;; Empty variadic parameter
(define (empty_variadic ...args) (core/str+ ...args))
(print (empty_variadic))

;; Macro arity comprehensive valid cases
(print "=== MACRO ARITY TESTING ===")
(define (fixed_two a b) (list a b))
(print "Fixed arity macro (2 params):")
(print "Success case:")
(print (fixed_two 1 2))
(define (variadic_any ...args) args)
(print "Variadic macro (any number of args):")
