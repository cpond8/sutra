- name: Macro Success Greet Alice
  style: list
  input: |
    (define (greet name) (print name))
    (greet "Alice")
  expected: "Alice"
- name: Macro Success Greet Bob
  style: list
  input: |
    (define (greet name) (print name))
    (greet "Bob")
  expected: "Bob"
- name: Macro Success Show Message
  style: list
  input: |
    (define (show value) (print value))
    (show "test message")
  expected: "test message"
- name: Macro Success Show Number
  style: list
  input: |
    (define (show value) (print value))
    (show 42)
  expected: "42"
- name: Macro Success Greet Simple
  style: list
  input: |
    (define (greet_simple name) (print name))
    (greet_simple "Alice")
  expected: "Alice"
- name: Macro Success Echo String Hello
  style: list
  input: |
    (define (echo_string text) (print text))
    (echo_string "Hello")
  expected: "Hello"
- name: Macro Success Echo String World
  style: list
  input: |
    (define (echo_string text) (print text))
    (echo_string "World")
  expected: "World"
- name: Macro Success Say Hello Alice
  style: list
  input: |
    (define (say_hello name) (print name))
    (say_hello "Alice")
  expected: "Alice"
- name: Macro Success Say Hello Bob
  style: list
  input: |
    (define (say_hello name) (print name))
    (say_hello "Bob")
  expected: "Bob"
- name: Macro Success Print Two
  style: list
  input: |
    (define (print_two first second)
      (do
        (print first)
        (print second)))
    (print_two "Line 1" "Line 2")
  expected: |
    Line 1
    Line 2
- name: Macro Success Strplus Two Args
  style: list
  input: (print (str+ "foo" "bar"))
  expected: "foobar"
- name: Macro Success Strplus Three Args
  style: list
  input: (print (str+ "a" "b" "c"))
  expected: "abc"
- name: Macro Success Strplus Hello World
  style: list
  input: (print (str+ "hello, " "world!"))
  expected: "hello, world!"
- name: Macro Success Test Strplus Variadic
  style: list
  input: |
    (define (test_str_plus ...args) (core/str+ ...args))
    (print (test_str_plus "a" "b" "c"))
  expected: "abc"
- name: Macro Success Test Strplus Empty Variadic
  style: list
  input: |
    (define (test_str_plus ...args) (core/str+ ...args))
    (print (test_str_plus))
  expected: ""
- name: Macro Success Wrap List
  style: list
  input: |
    (define (wrap x) (apply list x))
    (print (wrap (list 1 2 3)))
  expected: "(1 2 3)"
- name: Macro Success Wrap Empty List
  style: list
  input: |
    (define (wrap x) (apply list x))
    (print (wrap (list)))
  expected: "()"
- name: Macro Success Collect Variadic
  style: list
  input: |
    (define (collect ...items) items)
    (print (collect 1 2 3))
  expected: "(1 2 3)"
- name: Macro Success Collect Empty Variadic
  style: list
  input: |
    (define (collect ...items) items)
    (print (collect))
  expected: "()"
- name: Macro Success Multi Spread
  style: list
  input: |
    (define (multi_spread a b ...rest) (list a ...rest b ...rest))
    (print (multi_spread 1 2 3 4 5))
  expected: "(1 3 4 5 2 3 4 5)"
- name: Macro Success Nested Spread
  style: list
  input: |
    (define (nested_spread ...xs) (wrap xs))
    (print (nested_spread 7 8 9))
  expected: "(7 8 9)"
- name: Macro Success Show List
  style: list
  input: |
    (define (show_list x) (list ...x))
    (print (show_list (list "foo" "bar")))
  expected: "(foo bar)"
- name: Macro Success Empty Variadic
  style: list
  input: |
    (define (empty_variadic ...args) (core/str+ ...args))
    (print (empty_variadic))
  expected: ""
- name: Macro Arity Fixed Two Success
  style: list
  input: |
    (define (fixed_two a b) (list a b))
    (print (fixed_two 1 2))
  expected: "(1 2)"
- name: Macro Arity Variadic Any Empty
  style: list
  input: |
    (define (variadic_any ...args) args)
    (print (variadic_any))
  expected: "()"
- name: Macro Arity Variadic Any Single
  style: list
  input: |
    (define (variadic_any ...args) args)
    (print (variadic_any 1))
  expected: "(1)"
- name: Macro Arity Variadic Any Multiple
  style: list
  input: |
    (define (variadic_any ...args) args)
    (print (variadic_any 1 2 3))
  expected: "(1 2 3)"
- name: Macro Arity Mixed Params Required Only
  style: list
  input: |
    (define (mixed_params required ...optional) (list required optional))
    (print (mixed_params "req"))
  expected: "(req ())"
- name: Macro Arity Mixed Params Required One Optional
  style: list
  input: |
    (define (mixed_params required ...optional) (list required optional))
    (print (mixed_params "req" "opt1"))
  expected: "(req (opt1))"
- name: Macro Arity Mixed Params Required Multiple Optional
  style: list
  input: |
    (define (mixed_params required ...optional) (list required optional))
    (print (mixed_params "req" "opt1" "opt2" "opt3"))
  expected: "(req (opt1 opt2 opt3))"
- name: Macro Arity Nested Macro Forwarding
  style: list
  input: |
    (define (outer ...args) (inner ...args))
    (define (inner a b) (+ a b))
    (print (outer 3 4))
  expected: "7"
- name: Macro Arity Spread Operator In Body
  style: list
  input: |
    (define (spread_test ...items) (list ...items))
    (print (spread_test 1 2 3))
  expected: "(1 2 3)"
- name: Macro Arity Parameter Binding String
  style: list
  input: |
    (define (param_binding x) x)
    (print (param_binding "test"))
  expected: "test"
- name: Macro Arity Parameter Binding Number
  style: list
  input: |
    (define (param_binding x) x)
    (print (param_binding 42))
  expected: "42"
- name: Macro Arity Parameter Binding List
  style: list
  input: |
    (define (param_binding x) x)
    (print (param_binding (list 1 2 3)))
  expected: "(1 2 3)"
- name: Macro Error Fixed Two Arity Too Few
  style: list
  input: |
    (define (fixed_two a b) (list a b))
    (print (fixed_two 1))
  expect_error: "Arity error: fixed_two expects 2 arguments"
- name: Macro Error Nested Arity Too Few
  style: list
  input: |
    (define (outer ...args) (inner ...args))
    (define (inner a b) (+ a b))
    (print (outer 7))
  expect_error: "Arity error: inner expects 2 arguments"
- name: Macro Error Spread Nonlist
  style: list
  input: |
    (define (spread_nonlist x) (list ...x))
    (print (spread_nonlist 42))
  expect_error: "Spread operator used on non-list argument"