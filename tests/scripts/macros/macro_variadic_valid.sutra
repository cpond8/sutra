;; This file is now consolidated into macros_success.sutra

;; All valid macro expansion and parameter binding cases

;; Variadic macro forwarding
(define (test_str_plus ...args) (core/str+ ...args))
(print (test_str_plus "a" "b" "c"))
(print (test_str_plus))

;; Explicit spread operator
(define (wrap x) (apply list x))
(print (wrap (list 1 2 3)))
(print (wrap (list)))

;; Variadic parameter used outside call position
(define (collect ...items) items)
(print (collect 1 2 3))
(print (collect))

;; Multiple/nested spreads
(define (multi_spread a b ...rest) (list a ...rest b ...rest))
(print (multi_spread 1 2 3 4 5))

(define (nested_spread ...xs) (wrap xs))
(print (nested_spread 7 8 9))

;; Non-variadic parameter bound to a list
(define (show_list x) (list ...x))
(print (show_list (list "foo" "bar")))

;; Empty variadic parameter
(define (empty_variadic ...args) (core/str+ ...args))
(print (empty_variadic))

;; Macro arity comprehensive valid cases
(print "=== MACRO ARITY TESTING ===")
(define (fixed_two a b) (list a b))
(print "Fixed arity macro (2 params):")
(print "Success case:")
(print (fixed_two 1 2))
(define (variadic_any ...args) args)
(print "Variadic macro (any number of args):")
(print "Success cases:")
(print (variadic_any))
(print (variadic_any 1))
(print (variadic_any 1 2 3))
(define (mixed_params required ...optional) (list required optional))
(print "Mixed parameter macro (1 required + variadic):")
(print "Success cases:")
(print (mixed_params "req"))
(print (mixed_params "req" "opt1"))
(print (mixed_params "req" "opt1" "opt2" "opt3"))
(define (outer ...args) (inner ...args))
(define (inner a b) (+ a b))
(print "Nested macro with parameter forwarding:")
(print "Success case:")
(print (outer 3 4))
(define (spread_test ...items) (list ...items))
(print "Spread operator in macro body:")
(print "Success cases:")
(print (spread_test 1 2 3))
(define (param_binding x) x)
(print "Parameter binding:")
(print "Success cases:")
(print (param_binding "test"))
(print (param_binding 42))
(print (param_binding (list 1 2 3)))
(print "=== MACRO ARITY TESTING COMPLETE ===")
(print "All macro arity patterns tested successfully")
