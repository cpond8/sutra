;; Variadic Macro Forwarding and Argument Splicing Edge Cases

;; 1. Canonical: variadic macro forwarding
(define (test_str_plus ...args) (core/str+ ...args))
(print (test_str_plus "a" "b" "c")) ; should print abc
(print (test_str_plus))             ; should print (empty string)

;; 2. Explicit Spread Operator
(define (wrap x) (apply list x))
(print (wrap (list 1 2 3))) ; should print (1 2 3)
(print (wrap (list)))       ; should print ()

;; 3. Variadic Parameter Used Outside Call Position
(define (collect ...items) items)
(print (collect 1 2 3)) ; should print (1 2 3)
(print (collect))        ; should print ()

;; 4. Multiple/Nested Spreads
(define (multi_spread a b ...rest) (list a ...rest b ...rest))
(print (multi_spread 1 2 3 4 5)) ; should print (1 3 4 5 2 3 4 5)

(define (nested_spread ...xs) (wrap xs))
(print (nested_spread 7 8 9)) ; should print (7 8 9)

;; 5. Non-variadic Parameter Bound to a List
(define (show_list x) (list ...x))
(print (show_list (list "foo" "bar"))) ; should print (foo bar)

;; 6. Edge: Spread of Non-list
(define (spread_nonlist x) (list ...x))
(print (spread_nonlist 42)) ; should error: cannot spread non-list (canonical Lisp behavior)

;; 7. Empty Variadic Parameter
(define (empty_variadic ...args) (core/str+ ...args))
(print (empty_variadic)) ; should print (empty string)