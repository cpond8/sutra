# World State Atom Tests
# Tests for world state management operations

- name: "core/set! and core/get basic"
  input: "(do (core/set! (path x) 42) (core/get (path x)))"
  expected: "42"

- name: "core/set! overwrite value"
  input: "(do (core/set! (path y) 10) (core/set! (path y) 20) (core/get (path y)))"
  expected: "20"

- name: "core/get nonexistent path returns nil"
  input: "(core/get (path nonexistent))"
  expected: "nil"

- name: "core/exists? existing path"
  input: "(do (core/set! (path z) true) (core/exists? (path z)))"
  expected: "true"

- name: "core/exists? nonexistent path"
  input: "(core/exists? (path missing))"
  expected: "false"

- name: "core/del! remove value"
  input: "(do (core/set! (path w) 100) (core/del! (path w)) (core/exists? (path w)))"
  expected: "false"

- name: "core/del! returns deleted value"
  input: "(do (core/set! (path v) 123) (core/del! (path v)))"
  expected: "123"

- name: "nested path set and get"
  input: "(do (core/set! (path player hp) 100) (core/get (path player hp)))"
  expected: "100"

# Error cases
- name: "core/set! wrong arity"
  input: "(core/set! (path x))"
  expect_error_code: "ARITY_ERROR"

- name: "core/get wrong arity"
  input: "(core/get)"
  expect_error_code: "ARITY_ERROR"

- name: "core/del! wrong arity"
  input: "(core/del!)"
  expect_error_code: "ARITY_ERROR"

- name: "core/exists? wrong arity"
  input: "(core/exists?)"
  expect_error_code: "ARITY_ERROR"

- name: "core/set! type error"
  input: "(core/set! 42 100)"
  expect_error_code: "TYPE_ERROR"

- name: "core/get type error"
  input: '(core/get "string")'
  expect_error_code: "TYPE_ERROR"
