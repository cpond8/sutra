# Integration Tests - Core Language Features
# Tests that combine multiple language features

- name: "factorial function"
  input: "(do (define (fact n) (if (is? n 0) 1 (* n (fact (- n 1))))) (fact 5))"
  expected: "120"

- name: "counter with state"
  input: "(do (set! counter 0) (inc! counter) (inc! counter) (inc! counter) (get counter))"
  expected: "3"

- name: "nested world state"
  input: "(do (set! player.inventory.gold 100) (add! player.inventory.gold 50) (get player.inventory.gold))"
  expected: "150"

- name: "list manipulation"
  input: "(do (set! items (list 1 2 3)) (core/push! items 4) (len (get items)))"
  expected: "4"

- name: "conditional execution"
  input: "(do (set! health 75) (if (over? (get health) 50) (set! status good) (set! status bad)) (get status))"
  expected: "good"

- name: "string operations"
  input: '(str+ "Hello" " " "World" "!")'
  expected: '"Hello World!"'

- name: "mathematical expressions"
  input: "(+ (* 2 3) (/ 12 4) (- 10 5))"
  expected: "14"

- name: "mixed data types"
  input: "(list 42 true nil (str+ \"test\" \"123\"))"
  expected: '(42 true nil "test123")'

- name: "complex boolean logic"
  input: "(if (is? (mod 10 2) 0) \"even\" \"odd\")"
  expected: '"even"'

- name: "recursive list processing"
  input: "(do (define (sum-list lst) (if (is? (len lst) 0) 0 (+ (get lst 0) (sum-list (core/slice lst 1))))) (sum-list (list 1 2 3 4 5)))"
  expected: "15"
  skip: true  # This test requires more complex features that may not be implemented yet
