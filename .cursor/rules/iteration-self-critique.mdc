# Self-Critique and Iteration Process

---

## Instructions: Plan, Iterate and Self-Critique

Every solution should go through multiple iterations with rigorous self-critique. The goal is to arrive at the simplest, most effective solution. _Never settle for "good enough" -- push until you can go no farther._

---

## Core Principle: Clarity at All Levels

**Complexity begets complexity** - unnecessary abstraction layers create ecosystems of helper functions, detection logic, and conditional branches that hide the underlying simplicity.

The goal is **composition of simple parts**, not complex abstractions.

This applies to **all levels** of code, from architectural down to the individual line.

### Clear code is like a recipe:

* **It is direct.**
  - It doesn't waste your time with cleverness or verbosity.
  - It says exactly what is needed, nothing more.

* **It is stepwise.**
  - It doesn’t bundle several different tasks together.
  - Each step does one thing, then moves on.

* **It is ordered.**
  - It doesn't force you to jump around to complete the task.
  - Its logic flows linearly, top to bottom, start to finish.

* **It is transparent.**
  - It doesn’t hide complexity behind nebulous abstractions.
  - It shows you what matters, even when it’s messy.

* **It is consistent.**
  - It doesn’t change terms or patterns partway through.
  - It repeats what already works to make things clear.

* **It is predictable.**
  - It doesn’t assume or surprise.
  - It makes all needs and effects clearly visible.

* **It is considerate.**
  - It was not written for just the author.
  - It was written so anyone can follow along with confidence.

---

**Whether for a cook or a compiler, good instructions are the same: complete, clear, and easy to follow.**


---

## The Iteration Process

### Step 1: Identify the Apparent Complexity

**Look for things like:**

- Long, deeply nested chain operations
- Elaborate matching logic
- Consecutive nested conditionals
- Unnecessary abstraction layers
- Complex parameter passing between functions
- Helper functions that are only used once
- Functions that just check one condition then delegate
- Multiple functions doing similar things with slight variations

### Step 2: Trace the Actual Data Flow

**Ask Yourself: "What information is really needed?"**

- Examine actual data formats
- Look at real usage patterns
- Understand the core requirements
- Note the subtleties of the logic
- Consider the intentions behind the design

### Step 3: Ask "Why is this complex?"

**Often the complexity is unnecessary:**

- Are you handling cases that don't exist?
- Is the abstraction actually helping?
- Could this be done more directly?

**But sometimes complexity serves a real purpose:**

- Are these inconsistencies reflective of a real difference?
- Is this logic shouldering work for other components?
- Would a simplification here lead to complexity elsewhere?

**Distinguish between needless overengineering and sophisticated design.**

### Step 4: Unwind the Layers

**Remove abstraction layers to reveal the true core:**

- Straighten out the logic flow -- reveal the true redundancies hidden in the tangle
- What is really being done here?
- What is the intention behind this, its purpose?
- What is this _supposed_ to do?
- Do you really _need_ this to accomplish that?

**You would be surprised at how much you can cut without changing anything.**

### Step 5: Let Context Determine Behavior

- How does this effect the system as a whole?
- Can this be reused?
- Can this be replaced with something more appropriate for the system as a whole?

**Stop and ask**: "What is this actually trying to do?"

**The answer is usually something much simpler than the code suggests.**

### Step 6: Synthesize Your Insights into a Solution

- How does your proposed solution change existing behaviour?
- If it does, is it for the better?
- Weigh out the benefits and drawbacks
- Could your solution be even better?

**Optimal solutions can only be reached through cycles of rigorous self-critique and iteration.**

---

## Key Questions for Self-Critique

### Principles

- The purpose of a critique is to identify flaws and weaknesses left unaddressed to improve the quality and robustness of your work.
- A good critique provides actionable feedback and insights into things you might not have considered.
- A critique that simply nods and affirms that everything "looks good" is _worthless_, the same as no critique at all.

1. **"Is this really necessary?"**
   - Can I eliminate this complexity?
   - Is this abstraction actually needed?
   - Could I do this more directly?
2. **"Could I do this even more concisely?"**
   - Can I reduce lines without losing clarity?
   - Is there unnecessary repetition?
   - Could I combine related operations?
3. **"Could I make the logic here even clearer?"**
   - Is the control flow obvious?
   - Are the steps self-documenting?
   - Could I make this more like a recipe?
4. **"What is this actually trying to do?"**
   - Am I solving the right problem?
   - Is the real problem actually earlier down the pipeline?
   - Do I even need to solve this?

--

## Key Insights

- **Complexity at any level is a sign of poor design**
- **The iterative process reveals the true simplicity**
- **Each iteration should eliminate more complexity, not reorganize it**
- **The final solution is often much simpler than the initial approach**
