;;; Comprehensive test suite for Sutra's lexical closure implementation.
;;; Validates minimal capture, correct shadowing, and nested closure behavior.

(register-test! "closures-basic-capture"
  "Tests that a simple closure captures a single variable from its lexical environment."
  (let ((x 100))
    (let ((my-lambda (lambda () x)))
      (assert-eq 100 (my-lambda)))))

(register-test! "closures-multiple-capture"
  "Tests that a closure can capture multiple variables from its environment."
  (let ((x 10) (y 20))
    (let ((adder (lambda () (+ x y))))
      (assert-eq 30 (adder)))))

(register-test! "closures-argument-shadowing"
  "Tests that a lambda's arguments correctly shadow captured variables with the same name."
  (let ((x 10) (y 20))
    (let ((shadow-fn (lambda (x) (+ x y))))
      (assert-eq 25 (shadow-fn 5)))))

(register-test! "closures-no-capture-of-args"
  "Ensures that a lambda does not capture its own arguments as free variables."
  (let ((no-capture (lambda (a b) (+ a b))))
    (assert-eq 7 (no-capture 3 4))))

(register-test! "closures-nested-capture"
  "Tests that nested closures correctly capture variables from multiple parent scopes."
  (let ((a 1))
    (let ((b 2))
      (let ((c 3))
        (let ((inner-lambda (lambda () (+ a b c))))
          (assert-eq 6 (inner-lambda)))))))

(register-test! "closures-nested-shadowing"
  "Tests complex shadowing with nested closures and let bindings."
  (let ((x 1))
    (let ((y 2))
      (let ((outer (lambda (x)
                     (let ((z 3))
                       (lambda (y) (+ x y z))))))
        (let ((inner (outer 10)))
          (assert-eq 33 (inner 20)))))))

(register-test! "closures-state-independence"
    "Ensures that two closures created in the same scope have independent state."
    (let ((a 1))
        (let ((lambda1 (lambda () a))
              (lambda2 (lambda () a)))
            (assert-eq 1 (lambda1))
            (assert-eq 1 (lambda2)))))

(register-test! "closures-capture-from-let"
  "Tests that closures correctly capture variables defined in a 'let' block."
  (let ((val 42))
    (let ((closure (lambda () val)))
      (assert-eq 42 (closure)))))

(test "closures-unbound-symbol-error"
  (expect (error Eval))
  (let ((unbound-lambda (lambda () unbound-symbol)))
    (unbound-lambda)))
