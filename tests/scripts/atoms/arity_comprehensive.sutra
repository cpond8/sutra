;; Comprehensive Arity Testing for All Atoms
;; This test systematically checks arity requirements for every atom
;; to prevent bugs like the variadic macro arity issue

(print "=== ARITHMETIC ATOMS ARITY TESTS ===")

;; Addition: requires at least 2 arguments
(print "Testing + arity:")
(print "Success cases:")
(print (+ 1 2))          ; minimum
(print (+ 1 2 3))        ; variadic
(print (+ 1 2 3 4 5))    ; many args

(print "Expected failures (too few args):")
;; These should produce clear arity error messages
(+)                      ; 0 args - should fail with enhanced error

(print "Subtraction: requires at least 2 arguments")
(print "Success cases:")
(print (- 5 2))          ; minimum
(print (- 10 3 1))       ; variadic

(print "Expected failures:")
(-)                      ; 0 args - should fail
(- 5)                    ; 1 arg - should fail

(print "Multiplication: requires at least 2 arguments")
(print "Success cases:")
(print (* 2 3))          ; minimum
(print (* 2 3 4))        ; variadic

(print "Expected failures:")
(*)                      ; 0 args - should fail
(* 2)                    ; 1 arg - should fail

(print "Division: requires at least 2 arguments")
(print "Success cases:")
(print (/ 8 2))          ; minimum
(print (/ 24 2 3))       ; variadic

(print "Expected failures:")
(/)                      ; 0 args - should fail
(/ 8)                    ; 1 arg - should fail

(print "Modulo: requires exactly 2 arguments")
(print "Success cases:")
(print (mod 7 3))        ; exact arity

(print "Expected failures:")
(mod)                    ; 0 args - should fail
(mod 7)                  ; 1 arg - should fail
(mod 7 3 2)              ; 3 args - should fail

(print "=== COMPARISON ATOMS ARITY TESTS ===")

(print "Equality: requires exactly 2 arguments")
(print "Success cases:")
(print (eq? 1 1))        ; exact arity

(print "Expected failures:")
(eq?)                    ; 0 args - should fail
(eq? 1)                  ; 1 arg - should fail
(eq? 1 1 1)              ; 3 args - should fail

(print "Greater than: requires exactly 2 arguments")
(print "Success cases:")
(print (gt? 5 3))        ; exact arity

(print "Expected failures:")
(gt?)                    ; 0 args - should fail
(gt? 5)                  ; 1 arg - should fail
(gt? 5 3 1)              ; 3 args - should fail

(print "=== LOGIC ATOMS ARITY TESTS ===")

(print "Not: requires exactly 1 argument")
(print "Success cases:")
(print (not true))       ; exact arity
(print (not false))      ; exact arity

(print "Expected failures:")
(not)                    ; 0 args - should fail
(not true false)         ; 2 args - should fail

(print "=== CORE OPERATIONS ARITY TESTS ===")

(print "set!: requires exactly 2 arguments")
(print "Success cases:")
(set! temp 42)           ; exact arity
(print (get temp))

(print "Expected failures:")
;; These would be tested in separate error files since they terminate execution
;; (set!)                ; 0 args - should fail
;; (set! temp)           ; 1 arg - should fail
;; (set! temp 1 2)       ; 3 args - should fail

(print "get: requires exactly 1 argument")
(print "Success cases:")
(print (get temp))       ; exact arity

(print "Expected failures:")
;; These would be tested in separate error files since they terminate execution
;; (get)                 ; 0 args - should fail
;; (get temp extra)      ; 2 args - should fail

(print "=== LIST OPERATIONS ARITY TESTS ===")

(print "list: accepts any number of arguments")
(print "Success cases:")
(print (list))           ; 0 args - ok
(print (list 1))         ; 1 arg - ok
(print (list 1 2 3))     ; many args - ok

(print "len: requires exactly 1 argument")
(print "Success cases:")
(print (len (list 1 2 3))) ; exact arity

(print "Expected failures:")
(len)                    ; 0 args - should fail
(len (list 1 2) (list 3 4)) ; 2 args - should fail

(print "=== I/O OPERATIONS ARITY TESTS ===")

(print "print: requires exactly 1 argument")
(print "Success cases:")
(print "hello")          ; exact arity

;; Note: We can't easily test print failures here since they would
;; break the test output, but they're covered in separate error tests

(print "=== CONTROL FLOW ARITY TESTS ===")

(print "do: accepts any number of arguments")
(print "Success cases:")
(print (do))             ; 0 args - returns nil
(print (do 1))           ; 1 arg - returns value
(print (do 1 2 3))       ; many args - returns last

(print "error: requires exactly 1 argument")
(print "Success cases:")
(print "Testing error with valid arity (but not calling it)")

;; Note: We don't actually call error here since it would terminate the test

(print "=== STRING OPERATIONS ARITY TESTS ===")

(print "core/str+: accepts any number of arguments")
(print "Success cases:")
(print (core/str+))                    ; 0 args - empty string
(print (core/str+ "hello"))            ; 1 arg - single string
(print (core/str+ "hello" " " "world")) ; many args - concatenation

(print "=== ARITY TESTING COMPLETE ===")
(print "All systematic arity tests completed")