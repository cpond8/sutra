;; Sutra Math Atom Tests
;;
;; This suite validates the behavior of all mathematical atoms, including
;; standard operations, edge cases, and error conditions as specified in
;; the canonical language reference.

;;;
;;; 1. Addition (+)
;;;

(test "math: + success"
      (expect (value 10)
              (tags "math"))
      (+ 1 2 3 4))  ; 1 + 2 + 3 + 4 ? => 10

(test "math: + with negatives"
      (expect (value -2)
              (tags "math"))
      (+ 1 -3))  ; 1 + (-3) ? => -2

(test "math: + type error"
      (expect (error Runtime)
              (tags "math"))
      (+ 1 "two"))  ; 1 + "two" ? => type error

(test "math: + arity error (zero args)"
      (expect (error Runtime)
              (tags "math"))
      (+))  ; + expects at least 2 arguments, got 0

(test "math: + arity error (one arg)"
      (expect (error Runtime)
              (tags "math"))
      (+ 1))  ; + expects at least 2 arguments, got 1

;;;
;;; 2. Subtraction (-)
;;;

(test "math: - success"
      (expect (value 1)
              (tags "math"))
      (- 10 5 4))  ; 10 - 5 - 4 ? => 1

(test "math: - unary negation"
      (expect (value -5)
              (tags "math"))
      (- 5))  ; -5 ? => -5

(test "math: - arity error (zero args)"
      (expect (error Runtime)
              (tags "math"))
      (-))  ; - expects at least 1 argument, got 0

(test "math: - type error"
      (expect (error Runtime)
              (tags "math"))
      (- 10 "five"))  ; 10 - "five" ? => type error

;;;
;;; 3. Multiplication (*)
;;;

(test "math: * success"
      (expect (value 24)
              (tags "math"))
      (* 2 3 4))  ; 2 * 3 * 4 ? => 24

(test "math: * with zero"
      (expect (value 0)
              (tags "math"))
      (* 10 20 0))  ; 10 * 20 * 0 ? => 0

(test "math: * type error"
      (expect (error Runtime)
              (tags "math"))
      (* 2 "three"))  ; 2 * "three" ? => type error

(test "math: * arity error (zero args)"
      (expect (error Runtime)
              (tags "math"))
      (*))  ; * expects at least 2 arguments, got 0

(test "math: * arity error (one arg)"
      (expect (error Runtime)
              (tags "math"))
      (* 2))  ; * expects at least 2 arguments, got 1

;;;
;;; 4. Division (/)
;;;

(test "math: / success"
      (expect (value 2.5)
              (tags "math"))
      (/ 10 4))  ; 10 / 4 ? => 2.5

(test "math: / unary reciprocal"
      (expect (value 0.25)
              (tags "math"))
      (/ 4))  ; 1/4 ? => 0.25

(test "math: / arity error (zero args)"
      (expect (error Runtime)
              (tags "math"))
      (/))  ; / expects at least 1 argument, got 0

(test "math: / type error"
      (expect (error Runtime)
              (tags "math"))
      (/ 10 "two"))  ; 10 / "two" ? => type error

(test "math: / division by zero"
      (expect (error Eval)
              (tags "math"))
      (/ 10 0))  ; 10 / 0 ? => division by zero

;;;
;;; 5. Modulo (mod)
;;;

(test "math: mod success"
      (expect (value 1)
              (tags "math"))
      (mod 10 3))  ; 10 % 3 ? => 1

(test "math: mod arity error - too few"
      (expect (error Runtime)
              (tags "math"))
      (mod 10))  ; mod expects exactly 2 arguments, got 1

(test "math: mod arity error - too many"
      (expect (error Runtime)
              (tags "math"))
      (mod 10 3 2))  ; mod expects exactly 2 arguments, got 3

(test "math: mod type error"
      (expect (error Runtime)
              (tags "math"))
      (mod 10 "three"))  ; 10 % "three" ? => type error

(test "math: mod by zero"
      (expect (error Eval)
              (tags "math"))
      (mod 10 0))  ; 10 % 0 ? => modulo by zero
