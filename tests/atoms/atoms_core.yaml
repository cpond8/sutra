- name: Arithmetic Add Basic
  style: list
  input: (print (+ 2 3))
  expected: 5

- name: Arithmetic Add Multiple
  style: list
  input: (print (+ 1 2 3 4))
  expected: 10

- name: Arithmetic Add Negative
  style: list
  input: (print (+ -5 10))
  expected: 5

- name: Arithmetic Add Zero
  style: list
  input: (print (+ 0 0))
  expected: 0

- name: Arithmetic Add Identity
  style: list
  input: (print (+ 42 0))
  expected: 42

- name: Arithmetic Subtract Basic
  style: list
  input: (print (- 10 3))
  expected: 7

- name: Arithmetic Subtract Result
  style: list
  input: (print (- 20 5))
  expected: 15

- name: Arithmetic Subtract From Zero
  style: list
  input: (print (- 0 10))
  expected: -10

- name: Arithmetic Subtract Zero
  style: list
  input: (print (- 100 0))
  expected: 100

- name: Arithmetic Multiply Basic
  style: list
  input: (print (* 3 4))
  expected: 12

- name: Arithmetic Multiply Multiple
  style: list
  input: (print (* 2 3 4))
  expected: 24

- name: Arithmetic Multiply Negative
  style: list
  input: (print (* -2 5))
  expected: -10

- name: Arithmetic Multiply Identity
  style: list
  input: (print (* 1 1))
  expected: 1

- name: Arithmetic Multiply By One
  style: list
  input: (print (* 7 1))
  expected: 7

- name: Arithmetic Divide Basic
  style: list
  input: (print (/ 15 3))
  expected: 5

- name: Arithmetic Divide Result
  style: list
  input: (print (/ 20 4))
  expected: 5

- name: Arithmetic Divide Negative
  style: list
  input: (print (/ -12 3))
  expected: -4

- name: Arithmetic Divide By One
  style: list
  input: (print (/ 42 1))
  expected: 42

- name: Arithmetic Modulo Basic
  style: list
  input: (print (mod 10 3))
  expected: 1

- name: Arithmetic Modulo Result
  style: list
  input: (print (mod 17 5))
  expected: 2

- name: Arithmetic Modulo Negative
  style: list
  input: (print (mod -7 3))
  expected: -1

- name: Comparison Equal True
  style: list
  input: (print (eq? 5 5))
  expected: true

- name: Comparison Equal False
  style: list
  input: (print (eq? 3 4))
  expected: false

- name: Comparison Equal Negative
  style: list
  input: (print (eq? -1 -1))
  expected: true

- name: Comparison Equal Zero
  style: list
  input: (print (eq? 0 0))
  expected: true

- name: Comparison Greater Than True
  style: list
  input: (print (gt? 10 5))
  expected: true

- name: Comparison Greater Than False
  style: list
  input: (print (gt? 3 7))
  expected: false

- name: Comparison Greater Than Equal Values
  style: list
  input: (print (gt? 5 5))
  expected: false

- name: Comparison Greater Than Negative
  style: list
  input: (print (gt? -2 -5))
  expected: true

- name: Comparison Less Than True
  style: list
  input: (print (lt? 2 8))
  expected: true

- name: Comparison Less Than False
  style: list
  input: (print (lt? 9 4))
  expected: false

- name: Comparison Less Than Equal Values
  style: list
  input: (print (lt? 3 3))
  expected: false

- name: Comparison Less Than Negative
  style: list
  input: (print (lt? -5 -2))
  expected: true

- name: Comparison Greater Than Equal True
  style: list
  input: (print (gte? 5 5))
  expected: true

- name: Comparison Greater Than Equal True Greater
  style: list
  input: (print (gte? 8 3))
  expected: true

- name: Comparison Greater Than Equal False
  style: list
  input: (print (gte? 3 6))
  expected: false

- name: Comparison Greater Than Equal Zero
  style: list
  input: (print (gte? 0 0))
  expected: true

- name: Comparison Less Than Equal True
  style: list
  input: (print (lte? 4 4))
  expected: true

- name: Comparison Less Than Equal True Less
  style: list
  input: (print (lte? 2 7))
  expected: true

- name: Comparison Less Than Equal False
  style: list
  input: (print (lte? 8 2))
  expected: false

- name: Comparison Less Than Equal Negative
  style: list
  input: (print (lte? -1 -1))
  expected: true

- name: Logical Not True
  style: list
  input: (print (not true))
  expected: false

- name: Logical Not False
  style: list
  input: (print (not false))
  expected: true

- name: Logical Not Not True
  style: list
  input: (print (not (not true)))
  expected: true

- name: Logical Not Not False
  style: list
  input: (print (not (not false)))
  expected: false

- name: Logical Not Equal False
  style: list
  input: (print (not (eq? 1 2)))
  expected: true

- name: Logical Not Equal True
  style: list
  input: (print (not (eq? 3 3)))
  expected: false

- name: Logical Not Greater Than False
  style: list
  input: (print (not (gt? 5 10)))
  expected: true

- name: Logical Not Less Than False
  style: list
  input: (print (not (lt? 8 3)))
  expected: true

- name: List Empty
  style: list
  input: (print (list))
  expected: ()

- name: List Single Element
  style: list
  input: (print (list 1))
  expected: (1)

- name: List Multiple Elements
  style: list
  input: (print (list 1 2 3))
  expected: (1 2 3)

- name: List String Elements
  style: list
  input: (print (list "a" "b" "c"))
  expected: ("a" "b" "c")

- name: List Mixed Elements
  style: list
  input: (print (list 1 "hello" true))
  expected: (1 "hello" true)

- name: List Nested
  style: list
  input: (print (list (list 1 2) (list 3 4)))
  expected: ((1 2) (3 4))

- name: Len Empty List
  style: list
  input: (print (len (list)))
  expected: 0

- name: Len Single Element List
  style: list
  input: (print (len (list 1)))
  expected: 1

- name: Len Multiple Elements List
  style: list
  input: (print (len (list 1 2 3 4)))
  expected: 4

- name: Len String Elements List
  style: list
  input: (print (len (list "a" "b" "c" "d" "e")))
  expected: 5

- name: Len Nested List
  style: list
  input: (print (len (list (list 1) (list 2 3))))
  expected: 2

- name: Len Mixed Nested List
  style: list
  input: (print (len (list 1 (list 2 3 4) 5)))
  expected: 3

- name: Path Set and Get Basic
  style: list
  input: |
    (set! name "Alice")
    (print (get name))
  expected: Alice

- name: Path Set and Get Number
  style: list
  input: |
    (set! age 25)
    (print (get age))
  expected: 25

- name: Path Set and Get Nested
  style: list
  input: |
    (set! person.name "Bob")
    (set! person.age 30)
    (print (get person.name))
    (print (get person.age))
  expected: |
    Bob
    30

- name: Path Set and Get Indexed
  style: list
  input: |
    (set! items.0 "first")
    (set! items.1 "second")
    (print (get items.0))
    (print (get items.1))
  expected: |
    first
    second

- name: Path Delete Existing
  style: list
  input: |
    (set! age 25)
    (del! age)
    (print (get age))
  expected: nil

- name: Path Get Nonexistent
  style: list
  input: (print (get nonexistent))
  expected: nil

- name: Error Division By Zero
  style: list
  input: (print (/ 1 0))
  expect_error: "Division by zero"

- name: Error Type Mismatch Add
  style: list
  input: (print (+ 1 "a"))
  expect_error: "Type error: expected number, got string"

- name: Error Type Mismatch Subtract
  style: list
  input: (print (- 1 "a"))
  expect_error: "Type error: expected number, got string"

- name: Error Type Mismatch Multiply
  style: list
  input: (print (* 1 "a"))
  expect_error: "Type error: expected number, got string"

- name: Error Type Mismatch Divide
  style: list
  input: (print (/ 1 "a"))
  expect_error: "Type error: expected number, got string"

- name: Error Type Mismatch Modulo
  style: list
  input: (print (mod 1 "a"))
  expect_error: "Type error: expected number, got string"

- name: Error Arity Add
  style: list
  input: (print (+ 1))
  expect_error: "Arity error: + expects at least 2 arguments"

- name: Error Arity Subtract
  style: list
  input: (print (- 1))
  expect_error: "Arity error: - expects at least 2 arguments"

- name: Error Arity Multiply
  style: list
  input: (print (* 1))
  expect_error: "Arity error: * expects at least 2 arguments"

- name: Error Arity Divide
  style: list
  input: (print (/ 1))
  expect_error: "Arity error: / expects at least 2 arguments"

- name: Error Arity Modulo
  style: list
  input: (print (mod 1))
  expect_error: "Arity error: mod expects 2 arguments"

- name: Error Arity Eq
  style: list
  input: (print (eq? 1))
  expect_error: "Arity error: eq? expects 2 arguments"

- name: Error Arity Gt
  style: list
  input: (print (gt? 1))
  expect_error: "Arity error: gt? expects 2 arguments"

- name: Error Arity Lt
  style: list
  input: (print (lt? 1))
  expect_error: "Arity error: lt? expects 2 arguments"

- name: Error Arity Gte
  style: list
  input: (print (gte? 1))
  expect_error: "Arity error: gte? expects 2 arguments"

- name: Error Arity Lte
  style: list
  input: (print (lte? 1))
  expect_error: "Arity error: lte? expects 2 arguments"

- name: Error Arity Not
  style: list
  input: (print (not))
  expect_error: "Arity error: not expects 1 argument"

- name: Error Arity List
  style: list
  input: (print (list
  expect_error: "Arity error: list expects at most 256 arguments"