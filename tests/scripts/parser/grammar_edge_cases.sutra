;; Grammar Edge Cases - Systematic Testing
;; Tests parsing edge cases that could lead to bugs like the variadic macro issue
;; Focuses on parameter parsing, spread arguments, and macro definitions

(print "=== GRAMMAR EDGE CASES TESTING ===")

;; Test 1: Parameter list variations
(define (no_params) "no parameters")
(print "No parameters:")
(print (no_params))

(define (one_param x) x)
(print "One parameter:")
(print (one_param "test"))

(define (two_params a b) (list a b))
(print "Two parameters:")
(print (two_params 1 2))

(define (many_params a b c d e) (list a b c d e))
(print "Many parameters:")
(print (many_params 1 2 3 4 5))

;; Test 2: Variadic parameter patterns
(define (variadic_only ...args) args)
(print "Variadic only:")
(print (variadic_only 1 2 3))

(define (mixed_variadic req ...rest) (list req rest))
(print "Mixed variadic:")
(print (mixed_variadic "required" 1 2 3))

(define (multiple_required a b ...rest) (list a b rest))
(print "Multiple required + variadic:")
(print (multiple_required "a" "b" 1 2 3))

;; Test 3: Spread operator in different contexts
(define (spread_in_list ...items) (list ...items))
(print "Spread in list:")
(print (spread_in_list 1 2 3))

(define (spread_forwarding ...args) (variadic_only ...args))
(print "Spread forwarding:")
(print (spread_forwarding "a" "b" "c"))

;; Test 4: Nested parameter structures
(define (nested_calls ...args)
  (do
    (print "Inner call:")
    (print args)
    args))
(print "Nested parameter handling:")
(print (nested_calls 1 2 3))

;; Test 5: Parameter shadowing (same names in different scopes)
(define (outer x)
  (define (inner x) x)
  (inner (+ x 1)))
(print "Parameter shadowing:")
(print (outer 10))

;; Test 6: Complex expression parsing within parameters
(define (complex_expr_param x) x)
(print "Complex expressions as parameters:")
(print (complex_expr_param (+ 1 (* 2 3))))
(print (complex_expr_param (list 1 2 (+ 3 4))))

;; Test 7: Empty and edge case expressions
(print "Empty list:")
(print (list))

(print "Nested empty lists:")
(print (list (list) (list (list))))

;; Test 8: Whitespace and formatting edge cases
(define(no_space_define x)x)
(print "No space in define:")
(print (no_space_define "test"))

(define ( spaced_params  a   b  ) (list a b))
(print "Extra whitespace in params:")
(print (spaced_params 1 2))

;; Test 9: Comment interactions with parameters
(define (commented_params a ; first param
                         b ; second param
                         ) (list a b))
(print "Comments in parameter list:")
(print (commented_params "first" "second"))

;; Test 10: Macro calls with complex parameter expressions
(define (macro_with_complex_call ...args) args)
(print "Complex macro call:")
(print (macro_with_complex_call
         (+ 1 2)
         (list "a" "b")
         (not false)))

(print "=== GRAMMAR EDGE CASES COMPLETE ===")
(print "All grammar edge cases tested successfully")