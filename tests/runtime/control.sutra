;; Sutra Control Flow Tests
;;
;; This suite validates the behavior of control flow constructs like `if` and `do`.

;;;
;;; 1. If
;;;

(test "control: if - then branch"
      (expect (value "then")
              (tags "control"))
      (if true "then" "else"))  ; => "then"

(test "control: if - else branch"
      (expect (value "else")
              (tags "control"))
      (if false "then" "else"))  ; => "else"

(test "control: if - truthy condition"
      (expect (value "taken")
              (tags "control"))
      (if 1 "taken" "not-taken"))  ; => "taken"

(test "control: if - falsy condition (nil)"
      (expect (value "not-taken")
              (tags "control"))
      (if nil "taken" "not-taken"))  ; => "not-taken"

(test "control: if - arity error (too few)"
      (expect (error Validation)
              (tags "control"))
      (if true "then"))  ; if expects exactly 3 arguments, got 2

(test "control: if - arity error (too many)"
      (expect (error Validation)
              (tags "control"))
      (if true "then" "else" "extra"))  ; if expects exactly 3 arguments, got 4

;;;
;;; 2. Do
;;;

(test "control: do - empty"
      (expect (value nil)
              (tags "control"))
      (do))  ; => nil

(test "control: do - sequence"
      (expect (value 3)
              (tags "control"))
      (do (set! x 1) (set! y 2) (+ x y)))  ; => 3

(test "control: do - returns last expression"
      (expect (value "last")
              (tags "control"))
      (do "first" "second" "last"))  ; => "last"

;;;
;;; 3. Cond
;;;

(test "control: cond - first clause matches"
      (expect (value "positive")
              (tags "control"))
      (cond ((gt? 5 0) "positive") (else "negative")))  ; => "positive"

(test "control: cond - second clause matches"
      (expect (value "negative")
              (tags "control"))
      (cond ((gt? -5 0) "positive") (else "negative")))  ; => "negative"

(test "control: cond - else clause"
      (expect (value "zero")
              (tags "control"))
      (cond ((gt? 0 0) "positive") ((lt? 0 0) "negative") (else "zero")))  ; => "zero"

(test "control: cond - only first match evaluated"
      (expect (value "first")
              (tags "control"))
      (cond (true "first") (true "second")))  ; => "first"

(test "control: cond - no match"
      (expect (value nil)
              (tags "control"))
      (cond ((gt? -5 0) "positive") ((lt? 5 0) "negative")))  ; => nil

